How did viewing a diff between two versions of a file help you see the bug that was introduced?

When we use dif command - it returns lines that are different in the different versions of the same file 


Q. How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
A. Haing older versions of yuor code is a advantage as you can restore to any point in time. Restore to last stable version.  Also, as you move ahead in your project the code starts getting complicated it is always better to have the previou versions where you can always go back to when you have small chanes to be made or go back to a particular part of the code. 

 As the diff between two versions gets bigger, it gets harder to understand and less useful. 

 It's easier to understand what each commit does if each only does one thing and is fairly small. 

 Q. What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

 Like discussed, manually choosing when to create a commit - may sometimes lead to 1) larger commits which are difficult to trace back or understand 2)sometimes being too conscious makes us commit small small changes and thus leading to cluttering of lot of similar files 3) 

 Pros 1) we can make a logical change and save 2)proer naming convention can be followed and thsu easier to trace down 

 Q. Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

 Since GIT is made speially for coders - saving multiple files in one commit can mean a change that was related to one logic/feature and thus helpful to save multiple files with a single commit


 really liek to break it up into pieces, to kind of think about my work in terms of bunches of steps

 Q. How can you use the commands git log and git diff to view the history of files?

 A. git log gives us the commit id of each commit made in the past along with the description of the changes made
git diff gives us the excat difference/changes made in two particular commits 

Q. How might using version control make you more confident to make changes that could break something?
A. This feature helps us to go to any previous working/stable code/version. So while working on any project we can go back to a before version of the current code and test for any older version also it is helpful as we can trace back any bugs introduced while updating or adding features. It helps you take risk while you plan to make major changes to your code without any fear of losing all the previous progress

Q. Now that you have your workspace set up, what do you want to try using Git for?
A. 

 ---------------------------------------------------------------------------------------------------
Git Errors and Warnings Solution
Should not be doing an octopus
Octopus is a strategy Git uses to combine many different versions of code together. This message can appear if you try to use this strategy in an inappropriate situation.
ma
You are in 'detached HEAD' state
HEAD is what Git calls the commit you are currently on. You can “detach” the HEAD by switching to a previous commit, which we’ll see in the next video. Despite what it sounds like, it’s actually not a bad thing to detach the HEAD. Git just warns you so that you’ll realize you’re doing it.

Panic! (the 'impossible' happened)
This is a real error message, but it’s not output by Git. Instead it’s output by GHC, the compiler for a programming language called Haskell. It’s reserved for particularly surprising errors!
---------------------------------------------------------------------------------------------------

Using this strategy of examining the most likely looking commits doesn't always work, but it often does, and it can save a lot of debugging time. This is one of the reasons it's so useful to make one commit per logical change and give each commit a good message - to make it possible to take shortcuts like this!
-------------------------------------------------------------------------------------------------------------------------------------------------------------